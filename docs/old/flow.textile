h1. WebCore 2 Application Flow

h2. Startup

# Application configuration is loaded from one of two sources:
## Directly passed-in dictionary configuration.
## Configuration file extended by command-line options.
# A dependency graph of extensions is built.  E.g.:
## Application needs @template@, @session@, and @db@.
## The @base@ extension is always active and always first.
## The session extension 'uses' the database extension if available.
## Final sorting: @['base', 'template', 'db', 'session']@
# Each extension is initialized as encountered.  This allows extensions to dynamically adjust their @needs@ and @uses@ based on configuration values.
# Each extension, after dependency sorting, then has its @start@ method called.


h2. Shutdown

# Each extension, in reverse order, has its @stop@ method called.


h2. Request

# The request environment is captured by the WebCore WSGI Application.
# A context object is prepared, containing:
## Global configuration in @config@.
## WSGI environment in @environ@.
# Extension @prepare@ methods are called in order.
## The base extension adds @request@ and @response@ to the context.
## The template extension adds a @namespace@ Bunch and @render@ method to the context.
## The session extension adds a @session@ dict-like to the context.
## The database extension adds, depending on database engine, a @dbsession@ or @db@ object to the context.
# Extension @before@ methods are called in reverse order.
## The database extension prepares a transaction, if appropriate.
# Dispatch is called to route the request to the final controller.
## Controllers are instantiated with the context as the sole argument.
# Extension @after@ methods are called in reverse order.
## The database extension conditionally commits the transaction.
## The session extension conditionally saves the updated session.
# The WebCore WSGI application takes the @context.resopnse@ object and serves it to the client.


h2. Optimizations

The following are stored at application startup in order to eliminate the need to calculate them during a request.

# @_ext@ is a dependency-sorted list of instantiated extension objects.
# @_prepare@ is a sorted list of extension @prepare@ methods.
# @_before@ is a sorted list of extension @before@ methods.
# @_after@ is a reverse-sorted list of extension @after@ methods.

In the avove example, these variables would contain:

# @_ext = [BaseExtension(), TemplateExtension(), SessionExtension(), DatabaseExtension()]@
# @_prepare = [BaseExtension.prepare, TemplateExtension.prepare, DatabaseExtension.prepare, SessionExtension.prepare]@
# @_before = [DatabaseExtension.before]@
# @_after = [SessionExtension.after, DatabaseExtension.after]@
